<idea-plugin>
    <id>com.redhat.devtools.lsp4ij</id>
    <name>LSP4IJ</name>
    <version>1.0</version>
    <vendor email="developers@redhat.com" url="https://github.com/redhat-developer/lsp4ij/issues">Red-Hat</vendor>

    <change-notes><![CDATA[
    <h3>0.0.1</h3>
    <ul>
      <li>Initial release</li>
    </ul>    
    Learn more in the <a href="https://github.com/redhat-developer/lsp4ij/milestone/1?closed=1">changelog</a>.
  ]]>
    </change-notes>
    <description>
        <![CDATA[
    <p><a href="https://github.com/redhat-developer/lsp4ij" >LSP4IJ</a> is a free and open-source <a href="https://microsoft.github.io/language-server-protocol/">Language Server protocol (LSP)</a> client compatible with all flavors of IntelliJ.</p>

    <p>It currently doesn't provide any useful functionality on its own but is instead used as a dependency for other extensions, willing to integrate language servers with IntelliJ products.</p>

    <h3>LSP4IJ provides:</h3>
    <ul>
        <li>Language server <code>extension points</code> to add any language server:
            <ul>
                <li><a href="https://github.com/redhat-developer/lsp4ij/blob/main/docs/DeveloperGuide.md#declare-server-with-extension-point" >com.redhat.devtools.lsp4ij.server</a> extension point to define a language server.</li>
                <li><a href="https://github.com/redhat-developer/lsp4ij/blob/main/docs/DeveloperGuide.md#declare-language-mapping-with-extension-point" >com.redhat.devtools.lsp4ij.languageMapping</a> to associate an IntelliJ language with a language server definition.</li>
            </ul>
        </li>
        <li>An <a href="https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserGuide.md#lsp-console" >LSP Consoles view</a> to track LSP requests, responses, and notifications in a console.</li>
        <li>A <a href="https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserGuide.md#language-servers-preferences" >Language Servers preferences page</a> to configure the LSP trace level and the debug port to use to debug the language server.</li>
    </ul>

    <p>You can start with :
      <ul>
        <li>
          <a href="https://github.com/redhat-developer/lsp4ij/blob/main/docs/DeveloperGuide.md" > which explains step by step how to integrate a language server in LSP4J in an external IntelliJ plugin.
        </li>
        <li>
          <a href="https://github.com/redhat-developer/lsp4ij/blob/main/docs/UserGuide.md" > which explains how to use LSP console and Language server preferences.
        </li>
        <li>
          <a href="https://github.com/redhat-developer/lsp4ij/blob/main/docs/LSPSupport.md" > which explains the LSP support.
        </li>
      </ul>
    </p>
    ]]>
    </description>

    <depends>com.intellij.modules.platform</depends>
    <depends>com.redhat.devtools.intellij.telemetry</depends>

    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
    <idea-version since-build="223"/>

    <!-- LSP extension points -->
    <extensionPoints>
        <extensionPoint
                name="server"
                beanClass="com.redhat.devtools.lsp4ij.server.definition.extension.ServerExtensionPointBean">
            <with attribute="factoryClass" implements="com.redhat.devtools.lsp4ij.LanguageServerFactory"/>
        </extensionPoint>
        <extensionPoint
                name="languageMapping"
                beanClass="com.redhat.devtools.lsp4ij.server.definition.extension.LanguageMappingExtensionPointBean">
            <with attribute="documentMatcher" implements="com.redhat.devtools.lsp4ij.DocumentMatcher"/>
        </extensionPoint>
        <extensionPoint
                name="fileTypeMapping"
                beanClass="com.redhat.devtools.lsp4ij.server.definition.extension.FileTypeMappingExtensionPointBean">
            <with attribute="documentMatcher" implements="com.redhat.devtools.lsp4ij.DocumentMatcher"/>
        </extensionPoint>
    </extensionPoints>

    <!-- Language Server support -->
    <extensions defaultExtensionNs="com.intellij">

        <!-- LSP project services -->
        <projectService serviceImplementation="com.redhat.devtools.lsp4ij.LanguageServiceAccessor"/>
        <projectService
                serviceImplementation="com.redhat.devtools.lsp4ij.lifecycle.LanguageServerLifecycleManager"/>

        <!-- LSP textDocument/publishDiagnostics notification support -->
        <externalAnnotator
                id="LSPDiagnosticAnnotator"
                language=""
                implementationClass="com.redhat.devtools.lsp4ij.operations.diagnostics.LSPDiagnosticAnnotator"/>

        <!-- LSP textDocument/completion request support -->
        <completion.contributor
                id="LSPCompletionContributor"
                language="any"
                implementationClass="com.redhat.devtools.lsp4ij.operations.completion.LSPCompletionContributor"
                order="first"/>

        <!-- LSP textDocument/definition request support -->
        <gotoDeclarationHandler
                id="LSPGotoDeclarationHandler"
                implementation="com.redhat.devtools.lsp4ij.operations.navigation.LSPGotoDeclarationHandler"/>

        <!-- LSP textDocument/documentLink request support -->
        <externalAnnotator
                id="LSPDocumentLinkAnnotator"
                language=""
                implementationClass="com.redhat.devtools.lsp4ij.operations.documentLink.LSPDocumentLinkAnnotator"/>
        <gotoDeclarationHandler
                id="LSPDocumentLinkGotoDeclarationHandler"
                implementation="com.redhat.devtools.lsp4ij.operations.documentLink.LSPDocumentLinkGotoDeclarationHandler"/>

        <!-- LSP textDocument/documentHighlight request support -->
        <highlightUsagesHandlerFactory
                id="LSPHighlightUsagesHandlerFactory"
                implementation="com.redhat.devtools.lsp4ij.operations.highlight.LSPHighlightUsagesHandlerFactory"/>

        <!-- LSP textDocument/codeLens + textDocument/inlayHint requests support -->
        <codeInsight.inlayProviderFactory
                id="LSPInlayHintProvidersFactory"
                implementation="com.redhat.devtools.lsp4ij.operations.LSPInlayHintProvidersFactory"/>

        <!-- LSP textDocument/hover request support -->
        <!-- This hover support works only if there are no language which defines a 'lang.documentationProvider'. In case if it exists a
             'lang.documentationProvider' for the language, you need to declare in your plugin.xml

            <lang.documentationProvider
                language="MyLanguage"
                implementationClass="com.redhat.devtools.lsp4ij.operations.documentation.LSPDocumentationProvider"
                order="first"/>
        -->
        <documentationProvider
                id="LSPTextHover"
                implementation="com.redhat.devtools.lsp4ij.operations.documentation.LSPDocumentationProvider"
                order="first"/>

        <notificationGroup
                id="Language Server Protocol"
                displayType="BALLOON"
                hideFromSettings="true"/>
    </extensions>

    <!-- LSP consoles -->
    <extensions defaultExtensionNs="com.intellij">
        <projectConfigurable
                groupId="language"
                id="LanguageServers"
                bundle="messages.LanguageServerBundle"
                nonDefaultProject="true"
                key="language.servers"
                instance="com.redhat.devtools.lsp4ij.settings.LanguageServerListConfigurable"/>
        <projectService
                id="com.redhat.devtools.lsp4ij.settings.UserDefinedLanguageServerSettings"
                serviceImplementation="com.redhat.devtools.lsp4ij.settings.UserDefinedLanguageServerSettings"/>
        <toolWindow
                id="Language Servers"
                anchor="bottom"
                factoryClass="com.redhat.devtools.lsp4ij.console.LSPConsoleToolWindowFactory"
                canCloseContents="false"
                icon="AllIcons.Webreferences.Server"/>
    </extensions>

    <actions resource-bundle="messages.LanguageServerBundle">
        <action
                id="lsp.console.explorer.restart"
                class="com.redhat.devtools.lsp4ij.console.explorer.actions.RestartServerAction"
                icon="AllIcons.Actions.Restart"/>
        <action
                id="lsp.console.explorer.stop"
                class="com.redhat.devtools.lsp4ij.console.explorer.actions.StopServerAction"
                icon="AllIcons.Actions.Suspend"/>
        <action
                id="lsp.console.explorer.pause"
                class="com.redhat.devtools.lsp4ij.console.explorer.actions.PauseServerAction"
                icon="AllIcons.Actions.Pause"/>
        <action
                id="lsp.console.explorer.copy.command"
                class="com.redhat.devtools.lsp4ij.console.explorer.actions.CopyStartServerCommandAction"
                icon="AllIcons.Actions.Copy"/>
    </actions>

    <!-- LSP application listeners -->
    <applicationListeners>
        <listener
                topic="com.intellij.openapi.project.ProjectManagerListener"
                class="com.redhat.devtools.lsp4ij.ConnectDocumentToLanguageServerSetupParticipant"/>
    </applicationListeners>

</idea-plugin>